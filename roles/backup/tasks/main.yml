#########################################################################
# Title:         Bizbox: Backup Role                                   #
# Author(s):     l3uddz, desimaniac, RXWatcher1                         #
# URL:           https://github.com/jeremiahg7/Bizbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Backup
  block:
    - name: Sanity Check
      ansible.builtin.import_tasks: "sanity_check.yml"

    - name: Variables
      ansible.builtin.import_tasks: "variables.yml"
      tags:
        - set-backup
        - restore-service
        - bizbox-restore-service

    - name: Cron
      ansible.builtin.import_tasks: "cron.yml"
      when: ('set-backup' in ansible_run_tags) and not ('backup' in ansible_run_tags)
      tags: set-backup

    - name: Get Current Time
      ansible.builtin.shell: "date \"+%s\""
      register: start_time_lookup

    - name: "Set 'start_time' variable"
      ansible.builtin.set_fact:
        start_time: "{{ start_time_lookup.stdout }}"

    - name: Snapshot
      ansible.builtin.import_tasks: "snapshot.yml"

    - name: "Notify | Bizbox Backup: Started Bizbox backup task"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Started {{ use_snapshot | ternary('(snapshot-enabled) ', '') }}backup task."

    - name: "Create 'backup.lock'."
      ansible.builtin.file:
        path: "{{ playbook_dir }}/backup.lock"
        state: touch
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775

    - name: Check if previous backup folder exists
      ansible.builtin.stat:
        path: "{{ backup.local.destination }}"
      register: backup_local_folder

    - name: Check if previous backup exists locally
      ansible.builtin.find:
        paths: "{{ backup.local.destination }}"
        file_type: file
        patterns: '*.tar'
        recurse: true
      register: dir_files
      when: backup_local_folder.stat.exists and backup_local_folder.stat.isdir

    # Remove backup.old folder if it exists.
    - name: "Remove '{{ backup.local.destination }}.old'"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}.old"
        state: absent

    - name: Move previous backup if it exists locally
      block:
        # Use mv because Ansible copy & delete takes a lot longer.
        - name: "Moving '{{ backup.local.destination }}' to '{{ backup.local.destination }}.old'"
          ansible.builtin.shell: "mv '{{ backup.local.destination }}' '{{ backup.local.destination }}.old'"
          become: true
          become_user: "{{ user.name }}"
          when: dir_files.matched | int != 0
      when: backup_local_folder.stat.exists and backup_local_folder.stat.isdir

    - name: "Create backup folders."
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775
        recurse: true
      with_items:
        - "/home/{{ user.name }}/logs"
        - "{{ backup.local.destination }}"
        - "{{ backup.local.destination }}/opt"
        - "/opt/systemd-backup"
        - "/opt/crontab-backup"

    # Check if there is enough space in the local backup destination
    - name: Get size of opt folder
      ansible.builtin.command: "du -sk /opt --exclude='/opt/plex/Library/Application Support/Plex Media Server/Cache/PhotoTranscoder' --exclude='/opt/plex/Library/Application Support/Plex Media Server/Cache/Transcode'"
      register: estimated_backup_size

    - name: Get amount of free disk space
      ansible.builtin.shell: "df {{ backup.local.destination }} --output=avail | tail -1"
      register: local_backup_destination_free_space

    - name: Set backup_enough_disk_space boolean
      ansible.builtin.set_fact:
        backup_enough_disk_space: "{{ (local_backup_destination_free_space.stdout | int) > (estimated_backup_size.stdout.split()[0] | int) }}"

    - name: "Notify | Bizbox Backup: Started Bizbox backup task"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Not enough disk space. Aborting."
      when: (not backup_enough_disk_space)

    - name: "Fail when not enough disk space"
      ansible.builtin.fail:
        msg:
          - "Not enough disk space left in {{ backup.local.destination }}."
          - "Estimated Backup size: {{ estimated_backup_size.stdout.split()[0] | int }}"
          - "Free space: {{ local_backup_destination_free_space.stdout | int }}"
      when: (not backup_enough_disk_space)

    - name: "There is enough space to run the backup"
      ansible.builtin.debug:
        msg:
          - "There is enough disk space left in {{ backup.local.destination }}."
          - "Estimated Backup size: {{ estimated_backup_size.stdout.split()[0] | int }}"
          - "Free space: {{ local_backup_destination_free_space.stdout | int }}"

    # Backup config files
    - name: "Copy files to '{{ backup.local.destination }}'"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775
        decrypt: false
        force: true
      with_items:
        - "{{ playbook_dir }}/ansible.cfg"
        - "{{ playbook_dir }}/accounts.yml"
        - "{{ playbook_dir }}/settings.yml"
        - "{{ playbook_dir }}/adv_settings.yml"
        - "{{ playbook_dir }}/backup_config.yml"
        - "{{ playbook_dir }}/providers.yml"
        - "{{ playbook_dir }}/hetzner_nfs.yml"
        - "{{ playbook_dir }}/inventories/host_vars/localhost.yml"
        - "/home/{{ user.name }}/.config/rclone/rclone.conf"
      ignore_errors: true

    - name: "Copy custom files to '{{ backup.local.destination }}'"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775
        decrypt: false
        force: true
      with_items:
        - "{{ backup_user_defined_files }}"
      ignore_errors: true
      when: (backup_user_defined_files | length > 0)

    # Backup the excludes list if it exists
    - name: "Look for 'backup_excludes_list.txt' file in bizbox folder"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/backup_excludes_list.txt"
      register: backup_excludes_list

    - name: "Copy files to '{{ backup.local.destination }}'."
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/backup_excludes_list.txt"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775
        force: true
      when: (backup_excludes_list.stat.exists)

    - name: Set 'backup_excludes_list_path' variable
      ansible.builtin.set_fact:
        backup_excludes_list_path: "{{
          (playbook_dir + '/backup_excludes_list.txt')
          if ((backup_excludes_list is defined) and (backup_excludes_list.stat.exists))
          else (playbook_dir + '/roles/backup/files/backup_excludes_list.txt') }}"

    - name: bizbox Restore Service
      ansible.builtin.import_tasks: "restore_service.yml"
      when: restore_service_enabled
      tags:
        - restore-service
        - bizbox-restore-service

    - name: "Synchronize '/etc/systemd/system' to '/opt/systemd-backup' for inclusion in backup"
      ansible.builtin.shell: |
        /usr/bin/rsync \
          --delay-updates \
          -F \
          --compress \
          --archive \
          --no-recursive \
          --no-links \
          --no-perms \
          --include='*.service' \
          --include='*.mount' \
          /etc/systemd/system/* /opt/systemd-backup/
      args:
        executable: /bin/bash
        warn: false
      ignore_errors: true

    - name: "Copying crontabs to '/opt/crontab-backup' for inclusion in backup"
      ansible.builtin.shell: "cp -f /var/spool/cron/crontabs/* /opt/crontab-backup"
      ignore_errors: true

    - name: "Reset permissions of folders"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775
        recurse: true
      with_items:
        - "/opt/systemd-backup"
        - "/opt/crontab-backup"

    # Stop Containers

    - name: "Gather list of running Docker containers"
      ansible.builtin.shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' --filter label=com.github.bizbox.bizbox_managed=true | xargs echo -n"
      register: docker_containers
      ignore_errors: true

    - name: Set 'docker_containers' variable
      ansible.builtin.set_fact:
        docker_containers: "{{ docker_containers.stdout if (docker_containers is success) else '' }}"

    - name: Docker container tasks
      block:

        - name: Convert Docker containers string into a list
          ansible.builtin.set_fact:
            docker_containers: "{{ (docker_containers).split() | sort }}"

        - name: Filter out ignored apps from Docker containers list
          ansible.builtin.set_fact:
            docker_containers: "{{ docker_containers | difference(reverse_proxy_apps + torrent_apps + backup_ignore_containers) }}"

        - name: Convert Docker containers list back to string
          ansible.builtin.set_fact:
            docker_containers: "{{ docker_containers | join(' ') }}"

        - name: "Stop all running Docker containers"
          ansible.builtin.shell: "docker stop {{ docker_containers }}"
          ignore_errors: true

        - name: "Notify | Bizbox Backup: Stopped Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "Bizbox Backup: Stopped Docker containers."

      when: (docker_containers | trim | length > 0)

    # Services

    - name: Populate Service Facts
      ansible.builtin.service_facts:

      # Stop Cloudplow

    - name: Check if 'cloudplow.service' exists
      ansible.builtin.stat:
        path: "/etc/systemd/system/cloudplow.service"
      register: cloudplow_service

    - name: Stop 'cloudplow' service block
      block:

        - name: Get 'cloudplow' service state
          ansible.builtin.set_fact:
            cloudplow_service_running: "{{ (services['cloudplow.service'] is defined) and (services['cloudplow.service']['state'] == 'running') }}"

        - name: Stop 'cloudplow' service
          ansible.builtin.systemd:
            name: cloudplow
            state: stopped
          when: (cloudplow_service_running)

      when: (cloudplow_service is defined) and (cloudplow_service.stat.exists)

    # Create snapshot

    - name: Create Snapshot
      block:

        - name: "Snapshot | Wait for 5 seconds before creating snapshot"
          ansible.builtin.wait_for:
            timeout: 5

        - name: Snapshot | Display snapshot source and destination
          ansible.builtin.debug:
            msg: "Creating snapshot of '{{ backup_snapshot_source_path }}' at '{{ backup_snapshot_destination_path }}' ..."

        - name: Snapshot | Create BTRFS snapshot
          ansible.builtin.shell: 'btrfs subvolume snapshot {{ backup_snapshot_source_path }} {{ backup_snapshot_destination_path }}'
          when: (snapshot_type == 'btrfs')

        - name: Snapshot | Display new backup source location in snapshot
          ansible.builtin.debug:
            msg: "Backup will now archive folders from '{{ backup_opt_path }}'"

      when: (use_snapshot)

    # Start Docker containers when snapshot is enabled

    - name: Snapshot | Start Docker containers
      block:

        - name: "Snapshot | Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: "Snapshot | Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers }}'
          ignore_errors: true
          when: (docker_containers | trim | length > 0)

        - name: "Snapshot | Notify | Bizbox Backup: Started Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "Bizbox Backup: Started Docker containers."
          when: (docker_containers | trim | length > 0)

      when: (use_snapshot)

    - name: "Get list of all folders in '{{ backup_opt_path }}'"
      ansible.builtin.find:
        paths: "{{ backup_opt_path }}"
        recurse: false
        file_type: directory
      register: opt_folders_temp

    - name: Create 'opt_folders' variable
      ansible.builtin.set_fact:
        opt_folders: []

    - name: Add folder list to 'opt_folders' variable
      ansible.builtin.set_fact:
        opt_folders: "{{ opt_folders + [item.path] }}"
      with_items: "{{ opt_folders_temp.files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: "Archiving '{{ backup_opt_path }}' folders into '{{ backup.local.destination }}/'"
      ansible.builtin.shell: |
        tar \
          --ignore-failed-read \
          --warning=no-file-changed \
          --warning=no-file-removed \
          --exclude='./snapshots' \
          --exclude-from '{{ backup_excludes_list_path }}' \
          -cf '{{ backup.local.destination }}/opt/{{ item | basename }}.tar' -C '{{ item | dirname }}' './{{ item | basename }}' \
          > /dev/null
      args:
        executable: /bin/bash
        warn: false
      with_items: "{{ opt_folders }}"
      loop_control:
        label: "'{{ item }}' --> '{{ backup.local.destination }}/opt/{{ item | basename }}.tar'"
      ignore_errors: true

    - name: Snapshot | Cleanup Tasks
      block:

        - name: Snapshot | Check if BTRFS snapshot is mounted
          ansible.builtin.stat:
            path: "{{ backup_snapshot_destination_path }}"
          register: btrfs_snapshot_mounted

        - name: Snapshot | Delete BTRFS snapshot
          block:

            - name: Snapshot | Delete existing BTRFS snapshot (1/2)
              ansible.builtin.command: "btrfs subvolume delete {{ backup_snapshot_destination_path }}"
              register: snapshot_deletion
              ignore_errors: true

            - name: Snapshot | Delete existing BTRFS snapshot (2/2)
              ansible.builtin.file:
                path: "{{ backup_snapshot_destination_path }}"
                state: absent
              ignore_errors: true
              when: (snapshot_deletion is failed)

          when: (btrfs_snapshot_mounted.stat.isdir is defined) and (btrfs_snapshot_mounted.stat.isdir)

      when: (use_snapshot) and (snapshot_type == 'btrfs')

    - name: Check if tarball files were created
      ansible.builtin.find:
        paths: "{{ backup.local.destination }}/opt/"
        file_type: file
        patterns: '*.tar'
      register: dir_files2

    - name: Abort backup when the creation of tarball files fails
      ansible.builtin.fail:
        msg: "There must have been an issue during the tarball creation tasks as they are missing in '{{ local.destination }}/opt/'"
      when: (dir_files2.matched | int == 0)

    - name: "Remove '{{ backup.local.destination }}.old'"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}.old"
        state: absent
      become: true
      become_user: "{{ user.name }}"
      when: (dir_files2.matched | int != 0)

    - name: "Get size of '{{ backup.local.destination }}'"
      ansible.builtin.shell: du -s -B1 --apparent-size {{ backup.local.destination }} | awk '{print $1}'
      register: backup_new

    - name: "Set backup_size"
      ansible.builtin.set_fact:
        backup_size: "{{ (backup_new.stdout | int) | filesizeformat }}"

    - name: "Notify | Bizbox Backup: Backup created with total size of {{ backup_size }}."
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Backup created with total size of {{ backup_size }}."
      ignore_errors: true

    # Start Docker containers when snapshot is not enabled

    - name: Start Docker Containers
      block:

        - name: "Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: "Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers }}'
          ignore_errors: true
          when: (docker_containers | trim | length > 0)

        - name: "Notify | Bizbox Backup: Started Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "Bizbox Backup: Started Docker containers."
          when: (docker_containers | trim | length > 0)

      when: (not use_snapshot)

    - name: "Wait for 10 seconds before uploads"
      ansible.builtin.wait_for:
        timeout: 10

    - name: "Reset folder ownership of '{{ backup.local.destination }}/'"
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} {{ backup.local.destination }}/"
      args:
        warn: false

    # Reset mod dates to avoid conflicts during rclone backup. Ansible module doesn't touch folder contents via wildcard.
    - name: "Reset permissions and mod dates to files in '{{ backup.local.destination }}/'"
      ansible.builtin.shell: find '{{ backup.local.destination }}' -type f  -exec touch {} +
      become: true
      become_user: "{{ user.name }}"
      args:
        executable: /bin/bash
        warn: false

    # Due to a touch command in a previous backup, all files on rclone.destination have same mod dates, therefore, only one file's mod date is needed.
    - name: "Get datestamp for previous '{{ backup.rclone.destination }}/settings.yml'"
      ansible.builtin.shell: |
        /usr/bin/rclone lsl \
          {{ backup.rclone.destination }}/settings.yml \
          --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36' \
          | sed -e 's/^[ \t]*//' | cut -d ' ' -f 2,3 | cut -d '.' -f 1 | sed s/' '/_/g | sed s/':'/./g
      become: true
      become_user: "{{ user.name }}"
      register: rclone_timestamp
      ignore_errors: true
      when: (backup.rclone.enable)

    # If rclone_timestamp is blank, default the naming of files to '/archived/old/filename.ext', else /archived/date/filename.ext.
    - name: "Archive previous files in '{{ backup.rclone.destination }}'"
      ansible.builtin.shell: |
        /usr/bin/rclone moveto \
          --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36' \
          '{{ backup.rclone.destination }}/{{ item }}' \
          '{{ backup.rclone.destination }}/archived/{{ (rclone_timestamp.stdout) if (rclone_timestamp is defined) else 'old' }}/{{ item }}' \
          2>/dev/null
      become: true
      become_user: "{{ user.name }}"
      register: rclone_move
      failed_when: rclone_move.rc > 3
      ignore_errors: true
      when: (backup.rclone.enable) and (rclone_timestamp is defined) and ('Failed' not in rclone_timestamp.stderr)
      with_items:
        - "opt"
        - "ansible.cfg"
        - "accounts.yml"
        - "settings.yml"
        - "adv_settings.yml"
        - "backup_config.yml"
        - "providers.yml"
        - "rclone.conf"
        - "localhost.yml"
        - "hetzner_nfs.yml"
        - "backup_excludes.txt"
        - "backup_excludes_list.txt"

    - name: "Wait for 5 seconds before uploading"
      ansible.builtin.wait_for:
        timeout: 5

    - name: "Use rclone to upload backup to '{{ backup.rclone.destination }}'"
      ansible.builtin.shell: |
        /usr/bin/rclone copy \
          --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36' \
          --transfers="{{ backup_rclone_transfers }}" \
          --drive-chunk-size="{{ backup_rclone_drive_chunk_size }}" \
          --stats=30s \
          -vv \
          --log-file='{{ playbook_dir }}/backup_rclone.log' \
          '{{ backup.local.destination }}' '{{ backup.rclone.destination }}'
      become: true
      become_user: "{{ user.name }}"
      when: (backup.rclone.enable)

    - name: "Notify | Bizbox Backup: Rclone uploaded backup to '{{ backup.rclone.destination }}'"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Rclone uploaded backup to '{{ backup.rclone.destination }}'."
      when: (backup.rclone.enable)

    - name: "Use rsync to upload backup to '{{ backup.rsync.destination }}'"
      ansible.posix.synchronize:
        src: "{{ backup.local.destination }}/"
        dest: "{{ backup.rsync.destination }}/"
        set_remote_user: true
        compress: false
        dest_port: "{{ backup.rsync.port }}"
      become: true
      become_user: "{{ user.name }}"
      when: (backup.rsync.enable)

    - name: "Notify | Bizbox Backup: Rsync uploaded backup to '{{ backup.rsync.destination }}'"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Rsync uploaded backup to '{{ backup.rsync.destination }}'."
      when: (backup.rsync.enable)

    - name: Get Current Time
      ansible.builtin.shell: "date \"+%s\""
      register: end_time_lookup

    - name: "Set 'end_time' variable"
      ansible.builtin.set_fact:
        end_time: "{{ end_time_lookup.stdout }}"

    - name: "Calculate Total Time"
      ansible.builtin.set_fact:
        total_time: "{{ (((end_time | int) - (start_time | int)) / 60) | int | abs }}"

    - name: "Notify | Bizbox Backup: Finished Bizbox backup task in {{ total_time }} minutes"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Finished Bizbox {{ use_snapshot | ternary('(snapshot-enabled) ', '') }}backup task in {{ total_time }} minutes."

    - name: "Start 'cloudplow' service"
      ansible.builtin.systemd:
        name: cloudplow
        state: started
      when: (cloudplow_service is defined) and (cloudplow_service.stat.exists) and (cloudplow_service_running)

    - name: "Remove {{ backup.local.destination }}"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}"
        state: absent
      when: (dir_files2.matched | int != 0) and (not backup.local.enable)

    - name: Backup Status - Success
      ansible.builtin.debug:
        msg: "Backup Completed Successfully."

  rescue:
    - name: Snapshot | Cleanup Tasks
      block:

        - name: Snapshot | Check if BTRFS snapshot is mounted
          ansible.builtin.stat:
            path: "{{ backup_snapshot_destination_path }}"
          register: btrfs_snapshot_mounted

        - name: Snapshot | Delete BTRFS snapshot
          block:

            - name: Snapshot | Delete existing BTRFS snapshot (1/2)
              ansible.builtin.command: "btrfs subvolume delete {{ backup_snapshot_destination_path }}"
              register: snapshot_deletion
              ignore_errors: true

            - name: Snapshot | Delete existing BTRFS snapshot (2/2)
              ansible.builtin.file:
                path: "{{ backup_snapshot_destination_path }}"
                state: absent
              ignore_errors: true
              when: (snapshot_deletion is failed)

          when: (btrfs_snapshot_mounted.stat.isdir is defined) and (btrfs_snapshot_mounted.stat.isdir)

      when: (use_snapshot) and (snapshot_type == 'btrfs')

    - name: "Reset folder ownership of '{{ backup.local.destination }}/'"
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} {{ backup.local.destination }}/"
      args:
        warn: false

    - name: Start Docker Containers
      block:

        - name: "Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: "Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers }}'
          ignore_errors: true
          when: (docker_containers | trim | length > 0)

      when: (not use_snapshot)

    - name: "Start 'cloudplow' service"
      ansible.builtin.systemd:
        name: cloudplow
        state: started
      when: (cloudplow_service is defined) and (cloudplow_service.stat.exists) and (cloudplow_service_running)

    - name: Backup Status - Failure
      ansible.builtin.debug:
        msg: 'Backup terminated due to an error'

    - name: "Notify | Bizbox Backup: Backup terminated due to an error"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Bizbox Backup: Backup terminated due to an error."

  always:
    - name: "Remove 'backup.lock'"
      ansible.builtin.file:
        path: "{{ playbook_dir }}/backup.lock"
        state: absent

    - name: "Reset logs folder ownership."
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} '/home/{{ user.name }}/logs/'"
      args:
        warn: false
