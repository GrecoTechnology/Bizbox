- name: Async tar and upload
  ansible.builtin.shell: |
    tar \
      --ignore-failed-read \
      --warning=no-file-changed \
      --warning=no-file-removed \
      --exclude='./snapshots' \
      --exclude-from '{{ backup_excludes_list_path }}' \
      -cf - -C '{{ async_item | dirname }}' './{{ async_item | basename }}' \
      | /usr/bin/rclone rcat \
      --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36' \
      --drive-chunk-size="{{ backup_rclone_drive_chunk_size }}" \
      --stats=30s \
      -vv \
      --log-file='{{ playbook_dir }}/backup_rclone.log' \
      '{{ backup.rclone.destination }}/opt/{{ async_item | basename }}.tar'
  args:
    executable: /bin/bash
    warn: false
  become: true
  become_user: "{{ user.name }}"
  async: 14400
  poll: 0
  loop: "{{ folders }}"
  loop_control:
    loop_var: "async_item"
  register: async_results

- name: Check sync status
  ansible.builtin.async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: async_poll_results
  become: true
  become_user: "{{ user.name }}"
  until: async_poll_results.finished
  retries: 999

- name: Cleanup sync cache
  ansible.builtin.async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
    mode: cleanup
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  become: true
  become_user: "{{ user.name }}"
